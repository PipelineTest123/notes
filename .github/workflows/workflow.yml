name: Build & Test

on: [pull_request]
    
jobs:
    build:
        runs-on: windows-latest
        
        steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Download SqlServer
          uses: potatoqualitee/mssqlsuite@v1.7
          with:
            install: sqlengine, sqlpackage
    
        - name: Run sqlclient
          run: |
            sqlcmd -S localhost -U sa -P dbatools.I0 -Q "CREATE DATABASE TestDb;"
            sqlcmd -S localhost -U sa -P dbatools.I0 -d TestDb -Q "SELECT @@version;"
          
        - name: Setup .NET
          uses: actions/setup-dotnet@v4
          with: 
            dotnet-version: 8.0
            
        - name: Restore workloads
          run: dotnet workload restore ./Notes/Notes.csproj
          
        - name: Restore dependencies
          run: dotnet restore ./Notes/Notes.csproj

        # - name: Install Tools
        #   run: |
        #     dotnet tool install --global dotnet-ef
        #     dotnet tool install --global dotnet-coverage

            #Setup a Java JDK
        - name: Set up JDK 17
          uses: actions/setup-java@v4
          with:
            java-version: 17
            distribution: 'zulu'

        # Get the SonarCloud dependencies from cache
        - name: Cache SonarCloud packages
          uses: actions/cache@v4
          with:
            path: ~/sonar/cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar

        # Get the SonarCloud scanner from cache
        - name: Cache SonarCloud scanner
          id: cache-sonar-scanner
          uses: actions/cache@v4
          with:
            path: ./.sonar/scanner
            key: ${{ runner.os }}-sonar-scanner
            restore-keys: ${{ runner.os }}-sonar-scanner

        # Install the SonarCloud Scanner
        - name: Install SonarCloud scanner
          if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
          run: |
            mkdir -p .sonar/scanner
            dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
            echo "$(Resolve-Path ./.sonar/scanner)" >> $env:GITHUB_PATH
        - name: Start Sonar Analysis
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          run: |
            dotnet-sonarscanner begin /k:"PipelineTest123_notes" /o:"pipelinetest123" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.scanner.scanAll=false /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml                   
        - name: Build project
          env: 
            ConnectionStrings__TestConnection: ${{ secrets.TestConnection_CONNECTION_STRING }}
          run: dotnet build ./Notes/Notes.csproj --framework net8.0
          
        - name: Test
          env: 
            ConnectionStrings__TestConnection: ${{ secrets.TestConnection_CONNECTION_STRING }}
          run: dotnet test ./notes.sln --framework net8.0

        - name: End Sonar Analysis
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          run: dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"